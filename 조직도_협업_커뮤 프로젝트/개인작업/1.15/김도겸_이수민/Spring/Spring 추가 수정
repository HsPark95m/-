!Spring 로직 수정 및 추가!

게시판 메인 페이지 공지 글, 인기 글 상단 로직 추가

<PjBoardMapper.java>
selectTopPostsByCategory 메서드로 각 카테고리의 대표 공지 글을 표시합니다.
selectTopPostsByHits 메서드로 게시판의 인기 게시글 목록을 표시합니다.

<PjBoardMapper.xml>
-공지 글 조회-
"selectTopPostsByCategory"
설명:
카테고리가 '공지'인 게시글 중 삭제되지 않은(cb_is_deleted = FALSE) 게시글을 조회합니다.
최신 게시글이 먼저 표시되도록 cb_no DESC 정렬을 사용합니다.
상단에 표시할 게시글 수는 #{limit}로 제한합니다.

로직 흐름: 프론트엔드에서 요청 시 상단 공지로 표시할 게시글의 개수를 설정하여 limit 값을 전달합니다.
SQL 쿼리를 통해 공지 카테고리에 해당하는 최신 게시글을 가져옵니다.
결과를 반환해 프론트엔드에서 공지 영역에 표시합니다.

-인기 글 조회-
"selectTopPostsByHits"
설명:
삭제되지 않은(cb_is_deleted = FALSE) 게시글을 조회합니다.
조회 수(cb_hits)가 높은 순서대로 정렬합니다.
표시할 인기 글의 개수는 #{limit}로 제한합니다.

로직 흐름: 프론트엔드에서 요청 시 상단 인기 글로 표시할 게시글의 개수를 설정하여 limit 값을 전달합니다.
SQL 쿼리를 통해 조회 수가 높은 게시글을 순서대로 가져옵니다.
결과를 반환해 프론트엔드에서 인기 게시글 영역에 표시합니다.

<PjBoardService.java>
-공지 글 로직-
메서드: getTopNoticePosts(int limit)
역할:
게시판 메인 페이지 상단에 공지 글을 표시.
'공지' 카테고리에 속하는 삭제되지 않은 게시글 중 최신 글을 가져옴.
로직 흐름:
프론트엔드에서 상단에 표시할 공지 글의 개수(limit)를 요청.
해당 메서드가 PjBoardMapper.selectTopPostsByCategory(limit) 호출.
MyBatis 매퍼에서 SQL을 실행하여 최신 공지 글 리스트를 반환.
반환된 공지 글 리스트를 프론트엔드로 전달.

-인기 글 로직-
메서드: getTopPopularPosts(int limit)
역할:
게시판 메인 페이지 상단에 인기 글을 표시.
조회 수(cb_hits)가 높은 게시글 중 삭제되지 않은 글을 가져옴.
로직 흐름:
프론트엔드에서 상단에 표시할 인기 글의 개수(limit)를 요청.
해당 메서드가 PjBoardMapper.selectTopPostsByHits(limit) 호출.
MyBatis 매퍼에서 SQL을 실행하여 조회 수 기준으로 정렬된 인기 글 리스트를 반환.
반환된 인기 글 리스트를 프론트엔드로 전달.

<PjBoardServiceImpl.java>
-게시판 메인 페이지 로직-
PjBoardServiceImpl.java에 getMainPageTopPosts(int limit)를 추가
공지 글과 인기 글 데이터를 하나의 API로 통합하여 효율성을 높일 수 있음.


<PjBoardController.java>
-공지 글 조회- (공지 글 3개)
메서드: getNoticeAndPopularPosts()
역할:
게시판 메인 페이지 상단에 공지 글을 표시.
공지 글 3개를 가져와 noticePosts에 저장.
service.getTopNoticePosts(3)를 호출하여, 공지 글 3개를 반환.
로직 흐름:
클라이언트에서 요청을 보내면 해당 메서드가 실행됩니다.
service.getTopNoticePosts(3)를 호출하여 공지 글 3개를 가져옵니다.
반환된 공지 글 리스트는 noticePosts에 저장됩니다.
반환된 공지 글 리스트를 Map<String, List<CompanyBoardDto>> 형태로 저장한 뒤 클라이언트로 반환합니다.

-인기 글 조회- (인기 글 5개)
메서드: getNoticeAndPopularPosts()
역할:
게시판 메인 페이지 상단에 인기 글을 표시.
인기 글 5개를 가져와 popularPosts에 저장.
service.getTopPopularPosts(5)를 호출하여, 인기 글 5개를 반환.
로직 흐름:
클라이언트에서 요청을 보내면 해당 메서드가 실행됩니다.
service.getTopPopularPosts(5)를 호출하여 인기 글 5개를 가져옵니다.
반환된 인기 글 리스트는 popularPosts에 저장됩니다.
반환된 인기 글 리스트를 Map<String, List<CompanyBoardDto>> 형태로 저장한 뒤 클라이언트로 반환합니다.

결과 반환
noticePosts와 popularPosts를 Map<String, List<CompanyBoardDto>> 형식으로 묶어서 반환합니다. 이렇게 하면 클라이언트는 두 개의 리스트를 한 번에 처리할 수 있습니다.





-------------------------------------------------------------------------------------------------
카테고리 관리 코드 추가

<PjBoardMapper.java>
-카테고리 추가-
public void addCategory(String name);
설명: 새로운 카테고리를 추가하는 메서드입니다.
로직:
프론트엔드에서 새로운 카테고리 이름을 입력받아 addCategory 메서드를 호출합니다.
입력된 카테고리 이름이 이미 존재하지 않는지 확인 후, DB에 저장합니다.
주로 SQL INSERT 문을 사용하여 카테고리를 데이터베이스 테이블에 저장합니다.

-카테고리 목록 조회-
public ArrayList<CompanyBoardCategoryDto> categoryList();
설명: 모든 카테고리의 목록을 가져오는 메서드입니다.
로직:
프론트엔드에서 카테고리 관리를 위한 카테고리 리스트를 요청할 때 호출됩니다.
SQL SELECT 문을 사용하여 DB에서 모든 카테고리를 조회하고, ArrayList<CompanyBoardCategoryDto> 형태로 반환합니다.
반환된 데이터는 프론트엔드에서 버튼이나 옵션 형식으로 표시됩니다.

-카테고리 삭제-
public void deleteCategory(String name);
설명: 특정 카테고리를 삭제하는 메서드입니다.
로직:
삭제 요청된 카테고리 이름을 받아, 해당 카테고리를 DB에서 삭제합니다.
SQL DELETE 문을 사용하여 카테고리 데이터를 삭제합니다.
삭제된 카테고리와 연결된 게시글에 대한 처리(카테고리 기본값 변경 또는 삭제 여부 등)는 비즈니스 로직에 따라 추가로 처리할 수 있습니다.

<PjBoardMapper.xml>
-카테고리 추가-
"addCategory"
설명:
새로운 카테고리를 추가합니다.
사용자로부터 입력받은 name 값을 받아 company_board_category 테이블에 추가합니다.

작동 과정:
프론트엔드에서 카테고리 추가 요청이 들어옵니다.
백엔드 컨트롤러에서 addCategory 메서드를 호출합니다.
MyBatis가 위의 SQL 문을 실행해 새로운 카테고리 데이터를 DB에 저장합니다.

-카테고리 목록 조회-
"categoryList"
설명:
모든 카테고리의 목록을 조회합니다.
조회 결과는 CompanyBoardCategoryDto로 매핑됩니다.

작동 과정:
프론트엔드에서 카테고리 목록 요청이 들어옵니다.
백엔드 컨트롤러가 categoryList 메서드를 호출합니다.
MyBatis가 SQL을 실행하여 모든 카테고리를 가져옵니다.
결과는 프론트엔드로 전달되어, 사용자가 선택할 수 있는 목록으로 표시됩니다.

-카테고리 삭제-
"deleteCategory"
설명:
특정 카테고리를 삭제합니다.
삭제 대상은 cb_category_name이 요청받은 name과 일치하는 데이터입니다.

작동 과정:
프론트엔드에서 삭제할 카테고리를 선택하고 요청을 보냅니다.
백엔드 컨트롤러가 deleteCategory 메서드를 호출합니다.
MyBatis가 SQL을 실행해 해당 카테고리를 DB에서 삭제합니다.

<PjBoardService.java>
-카테고리 추가-
메서드: addCategory(String name)
역할: 새로운 카테고리를 추가.
로직 흐름:
프론트엔드에서 새 카테고리 이름을 입력받아 요청.
PjBoardMapper.addCategory(name) 호출.
MyBatis 매퍼에서 SQL을 실행하여 새 카테고리를 데이터베이스에 추가.

-카테고리 조회-
메서드: categoryList()
역할: 현재 게시판에 등록된 모든 카테고리를 조회.
로직 흐름:
프론트엔드가 카테고리 목록 요청.
PjBoardMapper.categoryList() 호출.
MyBatis 매퍼에서 SQL을 실행하여 모든 카테고리를 반환.
반환된 카테고리 리스트를 프론트엔드로 전달.

-카테고리 삭제-
메서드: deleteCategory(String name)
역할: 특정 카테고리를 삭제.
로직 흐름:
프론트엔드에서 삭제할 카테고리 이름을 선택하여 요청.
PjBoardMapper.deleteCategory(name) 호출.
MyBatis 매퍼에서 SQL을 실행하여 해당 카테고리를 데이터베이스에서 삭제.

 <PjBoardServiceImpl.java>
-카테고리 관리 로직-
PjBoardServiceImpl.java에 manageCategory(String action, String name)를 추가
카테고리 추가, 조회, 삭제를 한 클래스에서 처리하여 유지보수를 용이하게 함.

<PjBoardController.java>
-카테고리 추가-
메서드: addCategory(@RequestParam("name") String name)
역할: 새 카테고리를 추가합니다.
로직 흐름:
클라이언트에서 새로운 카테고리 이름을 입력하여 요청합니다.
서비스 계층에서 service.addCategory(name)를 호출하여 카테고리를 추가합니다.
카테고리가 성공적으로 추가되면 응답을 반환합니다.

-카테고리 조회-
메서드: categoryList()
역할: 모든 카테고리 목록을 조회합니다.
로직 흐름:
클라이언트에서 카테고리 목록을 요청합니다.
서비스 계층에서 service.categoryList()를 호출하여 모든 카테고리를 가져옵니다.
반환된 카테고리 목록을 클라이언트로 전달합니다.

-카테고리 삭제-
메서드: deleteCategory(@RequestParam("name") String name)
역할: 특정 카테고리를 삭제합니다.
로직 흐름:
클라이언트에서 삭제할 카테고리 이름을 입력하여 요청합니다.
서비스 계층에서 service.deleteCategory(name)를 호출하여 해당 카테고리를 삭제합니다.
카테고리가 성공적으로 삭제되면 응답을 반환합니다.
-------------------------------------------------------------------------------------------------
<CompanyBoardCategoryDto.java>
카테고리 관리를 위해 CompanyBoardCategoryDto.java에 cb_category_name를 추가
CompanyBoardCategoryDto.java 파일 추가됨



백엔드 Spring에 추가 및 수정한 파일
PjBoardController.java, PjBoardService.java, PjBoardServiceImpl.java,
PjBoardMapper.java, PjBoardMapper.xml 파일 수정

CompanyBoardCategoryDto.java 파일 추가됨

SearchDto.java(이름수정)

